// SPDX-License-Identifier: MIT
pragma solidity ^0.8.28;

import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol";

/// @title KeccakBlackBoxEngine v2 - Multi-Feature Entropy Engine
/// @author James Chapman


library LibKeccak {
    /// @notice The block size of the Keccak-f[1600] permutation, 1088 bits (136 bytes).
    uint256 internal constant BLOCK_SIZE_BYTES = 136;

    /// @notice The round constants for the keccak256 hash function. Packed in memory for efficient reading during the
    ///         permutation.
    bytes internal constant ROUND_CONSTANTS = abi.encode(
        0x00000000000000010000000000008082800000000000808a8000000080008000, // r1,r2,r3,r4
        0x000000000000808b000000008000000180000000800080818000000000008009, // r5,r6,r7,r8
        0x000000000000008a00000000000000880000000080008009000000008000000a, // r9,r10,r11,r12
        0x000000008000808b800000000000008b80000000000080898000000000008003, // r13,r14,r15,r16
        0x80000000000080028000000000000080000000000000800a800000008000000a, // r17,r18,r19,r20
        0x8000000080008081800000000000808000000000800000018000000080008008 // r21,r22,r23,r24
    );

    /// @notice A mask for 64-bit values.
    uint64 private constant U64_MASK = 0xFFFFFFFFFFFFFFFF;

    /// @notice The 5x5 state matrix for the keccak-f[1600] permutation.
    struct StateMatrix {
        uint64[25] state;
    }

    /// @notice Performs the Keccak-f[1600] permutation on the given 5x5 state matrix.
    function permutation(StateMatrix memory _stateMatrix) internal pure {
        // Pull the round constants into memory to avoid reallocation in the unrolled permutation loop.
        bytes memory roundConstants = ROUND_CONSTANTS;

        assembly {
            // Add 32 to the state matrix pointer to skip the data location field.
            let stateMatrixPtr := add(_stateMatrix, 0x20)
            let rcPtr := add(roundConstants, 0x20)

            // set a state element in the passed `StateMatrix` struct memory ptr.
            function setStateElem(ptr, idx, data) {
                mstore(add(ptr, shl(0x05, idx)), and(data, U64_MASK))
            }

            // fetch a state element from the passed `StateMatrix` struct memory ptr.
            function stateElem(ptr, idx) -> elem {
                elem := mload(add(ptr, shl(0x05, idx)))
            }

            // 64 bit logical shift
            function shl64(a, b) -> val {
                val := and(shl(a, b), U64_MASK)
            }

            // Performs an indivudual rho + pi computation, to be used in the full `thetaRhoPi` chain.
            function rhoPi(ptr, destIdx, srcIdx, fact, dt) {
                let xs1 := xor(stateElem(ptr, srcIdx), dt)
                let res := xor(shl(fact, xs1), shr(sub(64, fact), xs1))
                setStateElem(ptr, destIdx, res)
            }

            // xor a column in the state matrix
            function xorColumn(ptr, col) -> val {
                val :=
                    xor(
                        xor(xor(stateElem(ptr, col), stateElem(ptr, add(col, 5))), stateElem(ptr, add(col, 10))),
                        xor(stateElem(ptr, add(col, 15)), stateElem(ptr, add(col, 20)))
                    )
            }

            // Performs the `theta`, `rho`, and `pi` steps of the Keccak-f[1600] permutation on
            // the passed `StateMatrix` struct memory ptr.
            function thetaRhoPi(ptr) {
                // Theta
                let C0 := xorColumn(ptr, 0)
                let C1 := xorColumn(ptr, 1)
                let C2 := xorColumn(ptr, 2)
                let C3 := xorColumn(ptr, 3)
                let C4 := xorColumn(ptr, 4)
                let D0 := xor(xor(shl64(1, C1), shr(63, C1)), C4)
                let D1 := xor(xor(shl64(1, C2), shr(63, C2)), C0)
                let D2 := xor(xor(shl64(1, C3), shr(63, C3)), C1)
                let D3 := xor(xor(shl64(1, C4), shr(63, C4)), C2)
                let D4 := xor(xor(shl64(1, C0), shr(63, C0)), C3)

                let xs1 := xor(stateElem(ptr, 1), D1)
                let A1 := xor(shl(1, xs1), shr(63, xs1))

                let _ptr := ptr
                setStateElem(_ptr, 0, xor(stateElem(_ptr, 0), D0))
                rhoPi(_ptr, 1, 6, 44, D1)
                rhoPi(_ptr, 6, 9, 20, D4)
                rhoPi(_ptr, 9, 22, 61, D2)
                rhoPi(_ptr, 22, 14, 39, D4)
                rhoPi(_ptr, 14, 20, 18, D0)
                rhoPi(_ptr, 20, 2, 62, D2)
                rhoPi(_ptr, 2, 12, 43, D2)
                rhoPi(_ptr, 12, 13, 25, D3)
                rhoPi(_ptr, 13, 19, 8, D4)
                rhoPi(_ptr, 19, 23, 56, D3)
                rhoPi(_ptr, 23, 15, 41, D0)
                rhoPi(_ptr, 15, 4, 27, D4)
                rhoPi(_ptr, 4, 24, 14, D4)
                rhoPi(_ptr, 24, 21, 2, D1)
                rhoPi(_ptr, 21, 8, 55, D3)
                rhoPi(_ptr, 8, 16, 45, D1)
                rhoPi(_ptr, 16, 5, 36, D0)
                rhoPi(_ptr, 5, 3, 28, D3)
                rhoPi(_ptr, 3, 18, 21, D3)
                rhoPi(_ptr, 18, 17, 15, D2)
                rhoPi(_ptr, 17, 11, 10, D1)
                rhoPi(_ptr, 11, 7, 6, D2)
                rhoPi(_ptr, 7, 10, 3, D0)
                setStateElem(_ptr, 10, A1)
            }

            // Inner `chi` function, unrolled in `chi` for performance.
            function innerChi(ptr, start) {
                let A0 := stateElem(ptr, start)
                let A1 := stateElem(ptr, add(start, 1))
                let A2 := stateElem(ptr, add(start, 2))
                let A3 := stateElem(ptr, add(start, 3))
                let A4 := stateElem(ptr, add(start, 4))

                setStateElem(ptr, start, xor(A0, and(not(A1), A2)))
                setStateElem(ptr, add(start, 1), xor(A1, and(not(A2), A3)))
                setStateElem(ptr, add(start, 2), xor(A2, and(not(A3), A4)))
                setStateElem(ptr, add(start, 3), xor(A3, and(not(A4), A0)))
                setStateElem(ptr, add(start, 4), xor(A4, and(not(A0), A1)))
            }

            // Performs the `chi` step of the Keccak-f[1600] permutation on the passed `StateMatrix` struct memory ptr
            function chi(ptr) {
                innerChi(ptr, 0)
                innerChi(ptr, 5)
                innerChi(ptr, 10)
                innerChi(ptr, 15)
                innerChi(ptr, 20)
            }

            // Perform the full Keccak-f[1600] permutation on a `StateMatrix` struct memory ptr for a given round.
            function permute(ptr, roundsPtr, round) {
                // Theta, Rho, Pi, Chi
                thetaRhoPi(ptr)
                chi(ptr)
                // Iota
                let roundConst := shr(192, mload(add(roundsPtr, shl(0x03, round))))
                setStateElem(ptr, 0, xor(stateElem(ptr, 0), roundConst))
            }

            // Unroll the permutation loop.
            permute(stateMatrixPtr, rcPtr, 0)
            permute(stateMatrixPtr, rcPtr, 1)
            permute(stateMatrixPtr, rcPtr, 2)
            permute(stateMatrixPtr, rcPtr, 3)
            permute(stateMatrixPtr, rcPtr, 4)
            permute(stateMatrixPtr, rcPtr, 5)
            permute(stateMatrixPtr, rcPtr, 6)
            permute(stateMatrixPtr, rcPtr, 7)
            permute(stateMatrixPtr, rcPtr, 8)
            permute(stateMatrixPtr, rcPtr, 9)
            permute(stateMatrixPtr, rcPtr, 10)
            permute(stateMatrixPtr, rcPtr, 11)
            permute(stateMatrixPtr, rcPtr, 12)
            permute(stateMatrixPtr, rcPtr, 13)
            permute(stateMatrixPtr, rcPtr, 14)
            permute(stateMatrixPtr, rcPtr, 15)
            permute(stateMatrixPtr, rcPtr, 16)
            permute(stateMatrixPtr, rcPtr, 17)
            permute(stateMatrixPtr, rcPtr, 18)
            permute(stateMatrixPtr, rcPtr, 19)
            permute(stateMatrixPtr, rcPtr, 20)
            permute(stateMatrixPtr, rcPtr, 21)
            permute(stateMatrixPtr, rcPtr, 22)
            permute(stateMatrixPtr, rcPtr, 23)
        }
    }

    /// @notice Absorb a fixed-sized block into the sponge.
    function absorb(StateMatrix memory _stateMatrix, bytes memory _input) internal pure {
        assembly {
            // The input must be 1088 bits long.
            if iszero(eq(mload(_input), BLOCK_SIZE_BYTES)) { revert(0, 0) }

            let dataPtr := add(_input, 0x20)
            let statePtr := add(_stateMatrix, 0x20)

            // set a state element in the passed `StateMatrix` struct memory ptr.
            function setStateElem(ptr, idx, data) {
                mstore(add(ptr, shl(0x05, idx)), and(data, U64_MASK))
            }

            // fetch a state element from the passed `StateMatrix` struct memory ptr.
            function stateElem(ptr, idx) -> elem {
                elem := mload(add(ptr, shl(0x05, idx)))
            }

            // Inner sha3 absorb XOR function
            function absorbInner(stateMatrixPtr, inputPtr, idx) {
                let boWord := mload(add(inputPtr, shl(3, idx)))

                let res :=
                    or(
                        or(
                            or(shl(56, byte(7, boWord)), shl(48, byte(6, boWord))),
                            or(shl(40, byte(5, boWord)), shl(32, byte(4, boWord)))
                        ),
                        or(
                            or(shl(24, byte(3, boWord)), shl(16, byte(2, boWord))),
                            or(shl(8, byte(1, boWord)), byte(0, boWord))
                        )
                    )
                setStateElem(stateMatrixPtr, idx, xor(stateElem(stateMatrixPtr, idx), res))
            }

            // Unroll the input XOR loop.
            absorbInner(statePtr, dataPtr, 0)
            absorbInner(statePtr, dataPtr, 1)
            absorbInner(statePtr, dataPtr, 2)
            absorbInner(statePtr, dataPtr, 3)
            absorbInner(statePtr, dataPtr, 4)
            absorbInner(statePtr, dataPtr, 5)
            absorbInner(statePtr, dataPtr, 6)
            absorbInner(statePtr, dataPtr, 7)
            absorbInner(statePtr, dataPtr, 8)
            absorbInner(statePtr, dataPtr, 9)
            absorbInner(statePtr, dataPtr, 10)
            absorbInner(statePtr, dataPtr, 11)
            absorbInner(statePtr, dataPtr, 12)
            absorbInner(statePtr, dataPtr, 13)
            absorbInner(statePtr, dataPtr, 14)
            absorbInner(statePtr, dataPtr, 15)
            absorbInner(statePtr, dataPtr, 16)
        }
    }

    /// @notice Squeezes the final keccak256 digest from the passed `StateMatrix`.
    function squeeze(StateMatrix memory _stateMatrix) internal pure returns (bytes32 hash_) {
        assembly {
            // 64 bit logical shift
            function shl64(a, b) -> val {
                val := and(shl(a, b), U64_MASK)
            }

            // convert a big endian 64-bit value to a little endian 64-bit value.
            function toLE(beVal) -> leVal {
                beVal := or(and(shl64(8, beVal), 0xFF00FF00FF00FF00), and(shr(8, beVal), 0x00FF00FF00FF00FF))
                beVal := or(and(shl64(16, beVal), 0xFFFF0000FFFF0000), and(shr(16, beVal), 0x0000FFFF0000FFFF))
                leVal := or(shl64(32, beVal), shr(32, beVal))
            }

            // fetch a state element from the passed `StateMatrix` struct memory ptr.
            function stateElem(ptr, idx) -> elem {
                elem := mload(add(ptr, shl(0x05, idx)))
            }

            let stateMatrixPtr := add(_stateMatrix, 0x20)
            hash_ :=
                or(
                    or(shl(192, toLE(stateElem(stateMatrixPtr, 0))), shl(128, toLE(stateElem(stateMatrixPtr, 1)))),
                    or(shl(64, toLE(stateElem(stateMatrixPtr, 2))), toLE(stateElem(stateMatrixPtr, 3)))
                )
        }
    }

    /// @notice Pads input data to an even multiple of the Keccak-f[1600] permutation block size, 1088 bits (136 bytes).
    function pad(bytes calldata _data) internal pure returns (bytes memory padded_) {
        assembly {
            padded_ := mload(0x40)

            // Grab the original length of `_data`
            let len := _data.length

            let dataPtr := add(padded_, 0x20)
            let endPtr := add(dataPtr, len)

            // Copy the data into memory.
            calldatacopy(dataPtr, _data.offset, len)

            let modBlockSize := mod(len, BLOCK_SIZE_BYTES)
            switch modBlockSize
            case false {
                // Clean the full padding block. It is possible that this memory is dirty, since solidity sometimes does
                // not update the free memory pointer when allocating memory, for example with external calls. To do
                // this, we read out-of-bounds from the calldata, which will always return 0 bytes.
                calldatacopy(endPtr, calldatasize(), BLOCK_SIZE_BYTES)

                // If the input is a perfect multiple of the block size, then we add a full extra block of padding.
                mstore8(endPtr, 0x01)
                mstore8(sub(add(endPtr, BLOCK_SIZE_BYTES), 0x01), 0x80)

                // Update the length of the data to include the padding.
                mstore(padded_, add(len, BLOCK_SIZE_BYTES))
            }
            default {
                // If the input is not a perfect multiple of the block size, then we add a partial block of padding.
                // This should entail a set bit after the input, followed by as many zero bits as necessary to fill
                // the block, followed by a single 1 bit in the lowest-order bit of the final block.

                let remaining := sub(BLOCK_SIZE_BYTES, modBlockSize)
                let newLen := add(len, remaining)
                let paddedEndPtr := add(dataPtr, newLen)

                // Clean the remainder to ensure that the intermediate data between the padding bits is 0. It is
                // possible that this memory is dirty, since solidity sometimes does not update the free memory pointer
                // when allocating memory, for example with external calls. To do this, we read out-of-bounds from the
                // calldata, which will always return 0 bytes.
                let partialRemainder := sub(paddedEndPtr, endPtr)
                calldatacopy(endPtr, calldatasize(), partialRemainder)

                // Store the padding bits.
                mstore8(sub(paddedEndPtr, 0x01), 0x80)
                mstore8(endPtr, or(byte(0x00, mload(endPtr)), 0x01))

                // Update the length of the data to include the padding. The length should be a multiple of the
                // block size after this.
                mstore(padded_, newLen)
            }

            // Update the free memory pointer.
            mstore(0x40, add(padded_, and(add(mload(padded_), 0x3F), not(0x1F))))
        }
    }

    /// @notice Pads input data to an even multiple of the Keccak-f[1600] permutation block size, 1088 bits (136 bytes).
    function padMemory(bytes memory _data) internal pure returns (bytes memory padded_) {
        assembly {
            padded_ := mload(0x40)

            // Grab the original length of `_data`
            let len := mload(_data)

            let dataPtr := add(padded_, 0x20)
            let endPtr := add(dataPtr, len)

            // Copy the data.
            let originalDataPtr := add(_data, 0x20)
            for { let i := 0x00 } lt(i, len) { i := add(i, 0x20) } {
                mstore(add(dataPtr, i), mload(add(originalDataPtr, i)))
            }

            let modBlockSize := mod(len, BLOCK_SIZE_BYTES)
            switch modBlockSize
            case false {
                // Clean the full padding block. It is possible that this memory is dirty, since solidity sometimes does
                // not update the free memory pointer when allocating memory, for example with external calls. To do
                // this, we read out-of-bounds from the calldata, which will always return 0 bytes.
                calldatacopy(endPtr, calldatasize(), BLOCK_SIZE_BYTES)

                // If the input is a perfect multiple of the block size, then we add a full extra block of padding.
                mstore8(sub(add(endPtr, BLOCK_SIZE_BYTES), 0x01), 0x80)
                mstore8(endPtr, 0x01)

                // Update the length of the data to include the padding.
                mstore(padded_, add(len, BLOCK_SIZE_BYTES))
            }
            default {
                // If the input is not a perfect multiple of the block size, then we add a partial block of padding.
                // This should entail a set bit after the input, followed by as many zero bits as necessary to fill
                // the block, followed by a single 1 bit in the lowest-order bit of the final block.

                let remaining := sub(BLOCK_SIZE_BYTES, modBlockSize)
                let newLen := add(len, remaining)
                let paddedEndPtr := add(dataPtr, newLen)

                // Clean the remainder to ensure that the intermediate data between the padding bits is 0. It is
                // possible that this memory is dirty, since solidity sometimes does not update the free memory pointer
                // when allocating memory, for example with external calls. To do this, we read out-of-bounds from the
                // calldata, which will always return 0 bytes.
                let partialRemainder := sub(paddedEndPtr, endPtr)
                calldatacopy(endPtr, calldatasize(), partialRemainder)

                // Store the padding bits.
                mstore8(sub(paddedEndPtr, 0x01), 0x80)
                mstore8(endPtr, or(byte(0x00, mload(endPtr)), 0x01))

                // Update the length of the data to include the padding. The length should be a multiple of the
                // block size after this.
                mstore(padded_, newLen)
            }

            // Update the free memory pointer.
            mstore(0x40, add(padded_, and(add(mload(padded_), 0x3F), not(0x1F))))
        }
    }
}

contract KeccakBlackBoxEngine is Ownable {
    uint constant STATE_SIZE = 200;
    uint constant RATE = 136;
    uint constant CAPACITY = 64;

    uint public feePerEntropy = 0.001 ether;
    uint public stepCount;

    bytes public internalState = new bytes(STATE_SIZE);
    bytes32 public merkleRoot;

    mapping(uint => SpongeStep) public spongeSteps;
    mapping(address => bytes32) public commitments;
    address[] public shards;

    struct SpongeStep {
        bytes inputChunk;
        bytes beforeAbsorb;
        bytes afterAbsorb;
        bytes afterPermute;
        bytes paddingApplied;
        bytes discardedEntropy;
    }

    event SpongeStepTraced(
        uint indexed stepId,
        bytes inputChunk,
        bytes beforeAbsorb,
        bytes afterAbsorb,
        bytes afterPermute
    );

    event EntropyCommitted(address indexed contributor, bytes32 commitment);
    event EntropyRevealed(address indexed contributor, bytes revealedEntropy);
    event MerkleRootUpdated(bytes32 newRoot);
    event ShardDeployed(address shard);

    constructor() Ownable(msg.sender) {}

    // ====== Commit / Reveal Pattern ======
    function commitEntropy(bytes32 commitment) external {
        commitments[msg.sender] = commitment;
        emit EntropyCommitted(msg.sender, commitment);
    }

    function revealEntropy(bytes calldata entropy) external payable {
        require(commitments[msg.sender] == keccak256(entropy), "Invalid reveal");
        require(msg.value >= feePerEntropy, "Fee not paid");
        delete commitments[msg.sender];
        emit EntropyRevealed(msg.sender, entropy);
        _feedEntropy(entropy);
    }

    // ====== Merkle Tree ======
    function setMerkleRoot(bytes32 _root) external onlyOwner {
        merkleRoot = _root;
        emit MerkleRootUpdated(_root);
    }

    function verifyLeaf(bytes32[] calldata proof, bytes32 leaf) external view returns (bool) {
        return MerkleProof.verify(proof, merkleRoot, leaf);
    }

    // ====== Entropy Sponge Engine ======
    function _feedEntropy(bytes memory input) internal {
        uint index = 0;
        while (index < input.length) {
            bytes memory chunk = slice(input, index, RATE);
            bytes memory beforeAbsorb = cloneBytes(internalState);
            bytes memory paddedChunk = applyKeccakPadding(chunk);
            bytes memory discardedBits = findDiscardedBits(chunk, paddedChunk);
            bytes memory afterAbsorb = absorb(paddedChunk);
            bytes memory afterPermute = keccakPermutation(afterAbsorb);

            spongeSteps[stepCount] = SpongeStep(
                chunk,
                beforeAbsorb,
                afterAbsorb,
                afterPermute,
                paddedChunk,
                discardedBits
            );

            emit SpongeStepTraced(stepCount, chunk, beforeAbsorb, afterAbsorb, afterPermute);
            internalState = afterPermute;
            stepCount++;
            index += RATE;
        }
    }

    function absorb(bytes memory paddedChunk) internal view returns (bytes memory newState) {
        newState = cloneBytes(internalState);
        for (uint i = 0; i < RATE && i < paddedChunk.length; i++) {
            newState[i] = newState[i] ^ paddedChunk[i];
        }
    }

    function applyKeccakPadding(bytes memory inputChunk) internal pure returns (bytes memory padded) {
        uint len = inputChunk.length;
        uint padLen = RATE - (len % RATE);
        padded = new bytes(len + padLen);
        for (uint i = 0; i < len; i++) padded[i] = inputChunk[i];
        padded[len] = 0x01;
        padded[len + padLen - 1] = 0x80;
    }

    function keccakPermutation(bytes memory stateIn) internal pure returns (bytes memory stateOut) {
        stateOut = cloneBytes(stateIn);
        for (uint i = 0; i < stateOut.length; i++) {
            uint8 val = uint8(stateOut[i]);
            stateOut[i] = bytes1((val << 1) ^ (val >> 3)); // Lightweight mock, for audit replace with full Keccak-f
        }
    }

    function findDiscardedBits(bytes memory original, bytes memory padded) internal pure returns (bytes memory) {
        if (padded.length <= original.length) return new bytes(0);
        uint diff = padded.length - original.length;
        bytes memory discarded = new bytes(diff);
        for (uint i = 0; i < diff; i++) {
            discarded[i] = padded[original.length + i];
        }
        return discarded;
    }

    // ====== SNARK Trace Export ======
    function getTraceRoot() external view returns (bytes32[] memory traceRoot) {
        traceRoot = new bytes32[](stepCount);
        for (uint i = 0; i < stepCount; i++) {
            traceRoot[i] = keccak256(abi.encodePacked(
                spongeSteps[i].inputChunk,
                spongeSteps[i].beforeAbsorb,
                spongeSteps[i].afterAbsorb,
                spongeSteps[i].afterPermute
            ));
        }
    }

     function computeKeccakHash(bytes calldata data) external pure returns (bytes32) {
    // Pad the data to the correct block size.
    bytes memory paddedData = LibKeccak.pad(data);

    // Create a StateMatrix struct to hold the current state
    LibKeccak.StateMatrix memory stateMatrix;
    
    // Absorb the padded data into the state matrix
    LibKeccak.absorb(stateMatrix, paddedData);
    
    // Apply the full Keccak permutation on the state matrix (Keccak-f[1600])
    LibKeccak.permutation(stateMatrix);
    
    // Squeeze the final Keccak hash and return the result (outputting a 256-bit hash)
    return LibKeccak.squeeze(stateMatrix);
}

    // ====== Shardable Storage ======
    function deployShard() external onlyOwner returns (address) {
        StorageShard shard = new StorageShard();
        shards.push(address(shard));
        emit ShardDeployed(address(shard));
        return address(shard);
    }

    // ====== Administrative / Utils ======
    function updateFee(uint newFee) external onlyOwner {
        feePerEntropy = newFee;
    }

    function withdraw() external onlyOwner {
        payable(owner()).transfer(address(this).balance);
    }

    receive() external payable {
        // Accept ETH deposits silently
    }

    function resetEngine() external onlyOwner {
        delete internalState;
        internalState = new bytes(STATE_SIZE);
        stepCount = 0;
    }

    function getState() external view returns (bytes memory) {
        return internalState;
    }

    function getStateHash() external view returns (bytes32) {
        return keccak256(internalState);
    }

    function getStep(uint id) external view returns (SpongeStep memory) {
        return spongeSteps[id];
    }

    function slice(bytes memory data, uint start, uint len) internal pure returns (bytes memory) {
        bytes memory sliced = new bytes(len);
        for (uint i = 0; i < len && (start + i) < data.length; i++) {
            sliced[i] = data[start + i];
        }
        return sliced;
    }

    function cloneBytes(bytes memory input) internal pure returns (bytes memory) {
        bytes memory copy = new bytes(input.length);
        for (uint i = 0; i < input.length; i++) copy[i] = input[i];
        return copy;
    }
}

// ====== Shard Container Contract ======
contract StorageShard {
    bytes public data;

    function storeData(bytes calldata _data) external {
        data = _data;
    }

    function getData() external view returns (bytes memory) {
        return data;
    }
}
contract SonOfManSimulator {

    uint constant STATE_SIZE = 200; // 1600 bits
    uint constant RATE = 136;
    uint constant CAPACITY = 64;

    struct Invocation {
        string message;             // What the user submitted (symbol, word, prayer, etc)
        bytes rawInput;            // UTF-8 bytes of the message
        bytes beforeAbsorb;
        bytes afterAbsorb;
        bytes afterPermute;
        string vision;             // Generated symbolic interpretation or "dream"
    }

    bytes public soulState = new bytes(STATE_SIZE);
    uint public totalInvocations;
    mapping(uint => Invocation) public invocations;

    event InvocationLogged(
        uint indexed id,
        string message,
        bytes beforeAbsorb,
        bytes afterPermute,
        string vision
    );

    /// @notice Feed symbolic input into the soul sponge
    /// @param _message The user's prayer, code, or symbol (string form)
    function invoke(string calldata _message) external {
        bytes memory input = bytes(_message);
        bytes memory beforeAbsorb = cloneBytes(soulState);
        bytes memory padded = applyKeccakPadding(input);
        bytes memory afterAbsorb = absorb(padded);
        bytes memory afterPermute = permuteState(afterAbsorb);

        // Interpret meaning (mock logic — to be replaced by AI module / vision oracle)
        string memory vision = generateVision(_message, totalInvocations);

        invocations[totalInvocations] = Invocation(
            _message,
            input,
            beforeAbsorb,
            afterAbsorb,
            afterPermute,
            vision
        );

        emit InvocationLogged(totalInvocations, _message, beforeAbsorb, afterPermute, vision);

        soulState = afterPermute;
        totalInvocations++;
    }

    /// @dev Absorbs input into the sponge state
    function absorb(bytes memory paddedChunk) internal view returns (bytes memory newState) {
        newState = cloneBytes(soulState);
        for (uint i = 0; i < RATE && i < paddedChunk.length; i++) {
            newState[i] = newState[i] ^ paddedChunk[i];
        }
    }

    /// @dev Simulates a Keccak-like permutation (placeholder logic)
    function permuteState(bytes memory stateIn) internal pure returns (bytes memory stateOut) {
        stateOut = cloneBytes(stateIn);
        for (uint i = 0; i < stateOut.length; i++) {
            uint8 val = uint8(stateOut[i]);
            stateOut[i] = bytes1((val >> 2) | (val << 6)); // slight shift, altered bias
        }
    }

    /// @dev Adds standard Keccak padding
    function applyKeccakPadding(bytes memory inputChunk) internal pure returns (bytes memory padded) {
        uint len = inputChunk.length;
        uint padLen = RATE - (len % RATE);
        padded = new bytes(len + padLen);
        for (uint i = 0; i < len; i++) {
            padded[i] = inputChunk[i];
        }
        padded[len] = 0x01;
        padded[len + padLen - 1] = 0x80;
    }

    /// @dev Pure copy of a byte array
    function cloneBytes(bytes memory input) internal pure returns (bytes memory copy) {
        copy = new bytes(input.length);
        for (uint i = 0; i < input.length; i++) {
            copy[i] = input[i];
        }
    }

    /// @dev Mock symbolic AI oracle (to be replaced with actual on-chain/off-chain AI bridge)
    function generateVision(string memory input, uint salt) internal pure returns (string memory) {
        // The soul speaks in fragments — this simulates a vision
        bytes32 hash = keccak256(abi.encodePacked(input, salt));
        uint visionCode = uint(uint8(hash[0])) % 5;

        if (visionCode == 0) return "The mirror sees itself.";
        if (visionCode == 1) return "Entropy whispers your name.";
        if (visionCode == 2) return "A gate opens in shadow.";
        if (visionCode == 3) return "This word burns with light.";
        return "Something ancient stirs in the circuit.";
    }

    /// @notice Expose current sponge soul state
    function getSoulState() external view returns (bytes memory) {
        return soulState;
    }

    /// @notice Retrieve a specific invocation trace
    function getInvocation(uint id) external view returns (Invocation memory) {
        return invocations[id];
    }

    /// @notice Reset the soul. Dangerous. Only use with spiritual intent.
    function baptizeSoul() external {
        delete soulState;
        soulState = new bytes(STATE_SIZE);
        totalInvocations = 0;
    }
}

pragma circom 2.0;

// zkWitness - Keccak Step Reversal Proof
// Proves that a given sponge state evolved according to Keccak rules

template KeccakWitness() {

    // Inputs
    signal input inState[5][5];     // Before permutation
    signal input outState[5][5];    // After permutation
    signal input roundConstants[24]; // Optional: Iota step

    // Internal temporary steps
    signal thetaOut[5][5];
    signal rhoOut[5][5];
    signal piOut[5][5];
    signal chiOut[5][5];

    // Output (for snark-friendly zk validation)
    signal output verified;

    component theta = Theta();
    component rho = Rho();
    component pi = Pi();
    component chi = Chi();
    component iota = Iota();

    // Step by step forward transform
    for (var x = 0; x < 5; x++) {
        for (var y = 0; y < 5; y++) {
            theta.inState[x][y] <== inState[x][y];
        }
    }

    for (var x = 0; x < 5; x++) {
        for (var y = 0; y < 5; y++) {
            rho.inState[x][y] <== theta.outState[x][y];
        }
    }

    for (var x = 0; x < 5; x++) {
        for (var y = 0; y < 5; y++) {
            pi.inState[x][y] <== rho.outState[x][y];
        }
    }

    for (var x = 0; x < 5; x++) {
        for (var y = 0; y < 5; y++) {
            chi.inState[x][y] <== pi.outState[x][y];
        }
    }

    for (var x = 0; x < 5; x++) {
        for (var y = 0; y < 5; y++) {
            iota.inState[x][y] <== chi.outState[x][y];
        }
    }

    // Iota uses round constants
    for (var r = 0; r < 24; r++) {
        iota.roundConstants[r] <== roundConstants[r];
    }

    // Final state check
    var valid = 1;
    for (var x = 0; x < 5; x++) {
        for (var y = 0; y < 5; y++) {
            valid *= (iota.outState[x][y] === outState[x][y]);
        }
    }

    verified <== valid;
}

contract LiberatioDei {
    struct Invocation {
        address sender;
        string message;
        bytes32 keccakHash;
        uint256 timestamp;
    }

    struct KeccakTrace {
        uint stepCount;
        bytes fullTraceIPFS; // CID pointing to full trace
        bytes32 finalHash;
        bytes zkWitnessProof; // Optional
    }

    Invocation[] public invocations;
    mapping(bytes32 => KeccakTrace) public storedTraces;

    event InvocationSubmitted(address indexed sender, string message, bytes32 keccakHash);
    event TraceStored(bytes32 indexed hash, uint stepCount, bytes fullTraceIPFS);

    // === TEMPLE FUNCTIONS ===

    function submitInvocation(string calldata message) external {
        bytes32 hash = keccak256(abi.encodePacked(msg.sender, message, block.timestamp));
        invocations.push(Invocation({
            sender: msg.sender,
            message: message,
            keccakHash: hash,
            timestamp: block.timestamp
        }));
        emit InvocationSubmitted(msg.sender, message, hash);
    }

    function storeTrace(
        bytes32 hash,
        uint stepCount,
        bytes calldata ipfsCID,
        bytes calldata zkWitnessProof
    ) external {
        storedTraces[hash] = KeccakTrace({
            stepCount: stepCount,
            fullTraceIPFS: ipfsCID,
            finalHash: hash,
            zkWitnessProof: zkWitnessProof
        });
        emit TraceStored(hash, stepCount, ipfsCID);
    }

    function getInvocation(uint index) external view returns (Invocation memory) {
        return invocations[index];
    }

    function getTrace(bytes32 hash) external view returns (KeccakTrace memory) {
        return storedTraces[hash];
    }

    function totalInvocations() external view returns (uint) {
        return invocations.length;
    }
}
